#include <string>
#include <vector>

#include "BaseClient.hpp"


namespace net {


{% for struct in structs %}
struct {{struct.name}} {
    {% for field in struct.fields -%}
    {{field.type|ctype}} {{field.name}};
    {% endfor %}
};
{% endfor %}


class Client : public BaseClient {
    public:
        {% for type in types -%}
        void on{{type.type|type_name}}(std::function<void ({{type.struct.name}})> callback) {
            {{type.type|callbacks}}.push_back(callback);
        }
        {% endfor %}

        {% for type in types %}
        /// Send a '{{type.type}}' message the the server.
        void send({{type.struct.name}} entity) {
            PyEval_RestoreThread(m_py_tstate);
            auto dict = from{{type.struct.name}}(entity);
            if (dict) {
                pushMessage("{{type.type}}", dict);
            }
            m_py_tstate = PyEval_SaveThread();
        }
        {% endfor %}

    private:
        {% for type in types -%}
        std::vector<std::function<void ({{type.struct.name}})>> {{type.type|callbacks}};
        {% endfor %}

        void convert(std::string type, PyObject* entity) {
            {% for type in types %}
            if (type == "{{type.type}}") {
                {{type.struct.name}} c_entity;
                if ({{type.struct|converter}}(entity, &c_entity)) {
                    for (auto callback : {{type.type|callbacks}}) {
                        callback(c_entity);
                    }
                } else {
                    fprintf(stderr, "Couldn't convert "
                                    "dictionary to {{type.struct.name}}\n");
                }
            }
            {% endfor %}
        }


        int py_int_as_native(PyObject* py, long* object) {
            if (!PyLong_Check(py)) {
                return 0;
            }
            *object = PyLong_AsLong(py);
            return 1;
        }

        int py_float_as_native(PyObject* py, double* object) {
            if (!PyFloat_Check(py)) {
                return 0;
            }
            *object = PyFloat_AsDouble(py);
            return 1;
        }

        int py_str_as_native(PyObject* py, std::string* object) {
            if (!PyUnicode_Check(py)) {
                return 0;
            }
            *object = std::string(PyUnicode_AsUTF8(py));
            return 1;
        }

        int py_pyobject_as_native(PyObject* py, PyObject** object) {
            // TODO: Where does this get decremented.
            Py_INCREF(py);
            *object = py;
            return 1;
        }

        {% for struct in structs %}
        /// Convert a Python dictionary to a {{struct.name}}
        ///
        /// If the dictionary could be successfully to a {{struct.name}} then
        /// the given address is set to the new message entity object and
        /// 1 is returned.
        ///
        /// Zero is returned if the dictionary couldn't be converted for any
        /// reason.
        int {{struct|converter}}(PyObject* dict, {{struct.name}}* entity) {
            if (!PyDict_CheckExact(dict)) {
                return 0;
            }
            {%- for field in struct.fields %}
            {{field.type|ctype}} c_field_{{field.name}};
            auto py_field_{{field.name}} =
                PyDict_GetItemString(dict, "{{field.name}}");
            if (!py_field_{{field.name}}) {
                PyErr_Print();
                PyErr_Clear();
                return 0;
            }
            if (!{{field|converter}}(
                    py_field_{{field.name}}, &c_field_{{field.name}})) {
                return 0;
            }
            {% endfor %}
            *entity = {
                {% for field in struct.fields -%}
                c_field_{{field.name}}{% if not loop.last %},{% endif %}
                {% endfor -%}
            };
            return 1;
        }

        /// Convert a {{struct.name}} to a Python dictionary.
        ///
        /// Returns a new reference to a dictionary. Returns NULL on failure;
        /// the Python error indicator will be cleared though.
        PyObject* from{{struct.name}}({{struct.name}} entity) {
            auto dict = PyDict_New();
            if (!dict) {
                PyErr_Print();
                PyErr_Clear();
                return NULL;
            }
            PyObject* field;
            {%- for field in struct.fields %}
            field = {{field.type|from_c}}(entity.{{field.name}});
            if (!field) {
                fprintf(stderr, "Couldn't convert {{struct.name}}"
                                ".{{field.name}} to {{field.type}}\n");
                PyErr_Print();
                PyErr_Clear();
                Py_DECREF(dict);
                return NULL;
            } else {
                bool added = PyDict_SetItemString(
                    dict, "{{field.name}}", field) == 0;
                // No longer need our local reference
                Py_DECREF(field);
                if (!added) {
                    fprintf(stderr, "Couldn't add {{struct.name}}"
                                    ".{{field.name}} to dictionary\n");
                    PyErr_Print();
                    PyErr_Clear();
                    Py_DECREF(dict);
                    return NULL;
                };
            }
            {% endfor %}
            return dict;
        }
        {% endfor %}


        /// Convert a std::string to a Python Unicode string.
        ///
        /// Returns a new Python string on success, NULL otherwise.
        PyObject* stringToPyUnicode(std::string string) {
            return PyUnicode_FromString(string.c_str());
        }

        /// No-op to 'convert' a PyObject* to a PyObject*.
        PyObject* pyObjectToPyObject(PyObject* object) {
            return object;
        }
};


}  // namespace net
